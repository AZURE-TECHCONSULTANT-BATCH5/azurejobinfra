
trigger:
- main
pool:
  vmImage: ubuntu-latest

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages: 
- stage: TerraformVaildate
  jobs: 
    - job: TerraformValidateJob
     

      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'Emma-backend-capstone-rg'
          backendAzureRmStorageAccountName: 'emmabackendstorage'
          backendAzureRmContainerName: 'azpipelinebacked'
          backendAzureRmKey: 'aks-base-tfstate'
          allowTelemetryCollection: false
      - task: TerraformTaskV4@4
        displayName: Terraform Validation 
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
# Stage-2: Deploy Stages for Dev & QA
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)
- stage: DeployAKSCluster
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
        environment: $(DEV_ENVIRONMENT)
        strategy:
          runOnce:
            deploy:
              steps:
              - task: DownloadSecureFile@1
                displayName: Download SSH Key
                name: sshkey
                inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              - task: TerraformTaskV4@4
                displayName: Terraform init
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'Emma-backend-capstone-rg'
                  backendAzureRmStorageAccountName: 'emmabackendstorage'
                  backendAzureRmContainerName: 'azpipelinebacked'
                  backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).azpipebacked'
                  allowTelementryCollection: false
              - task: TerraformTaskV4@4
                displayName: terraform plan
                inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                commandOptions: 'commandOptions: ''-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'''
                environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
              - task: TerraformTaskV4@4
                displayName: Terraform apply
                inputs:
                  provider: 'azurerm'
                  command: 'apply'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-out'
                  commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                  environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
          
    
        