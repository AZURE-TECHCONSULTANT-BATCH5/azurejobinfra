trigger:
- main

pool:
  vmImage: ubuntu-latest

stages: 
- stage: TerraformValidate
  jobs: 
    - job: TerraformValidateJob
      displayName: Terraform Validate Job
      steps:
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifacts'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        displayName: 'Terraform Install'
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        displayName: 'Terraform Init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'Emma-backend-capstone-rg'
          backendAzureRmStorageAccountName: 'emmabackendstorage'
          backendAzureRmContainerName: 'azpipelinebacked'
          backendAzureRmKey: 'aks-base-tfstate'
          allowTelemetryCollection: false
      - task: TerraformTaskV4@4
        displayName: 'Terraform Validation'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'

- stage: DeployAKSCluster
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: Deploy Dev AKS Cluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: 
        name: $(DEV_ENVIRONMENT)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadSecureFile@1
              displayName: 'Download SSH Key'
              name: sshkey
              inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformTaskV4@4
              displayName: 'Terraform init'
              inputs:
                provider: 'azurerm'
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendServiceArm: 'terraform-aks-azurerm-svc-con'
                backendAzureRmResourceGroupName: 'Emma-backend-capstone-rg'
                backendAzureRmStorageAccountName: 'emmabackendstorage'
                backendAzureRmContainerName: 'azpipelinebacked'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).azpipebacked'
                allowTelementryCollection: false
            - task: TerraformTaskV4@4
              displayName: 'Terraform plan'
              inputs:
                provider: 'azurerm'
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'
            - task: TerraformTaskV4@4
              displayName: 'Terraform apply'
              inputs:
                provider: 'azurerm'
                command: 'apply --auto-approve'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests-out'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                environmentServiceNameAzureRM: 'terraform-aks-azurerm-svc-con'

    
        